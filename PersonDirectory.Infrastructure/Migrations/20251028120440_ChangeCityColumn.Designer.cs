// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PersonDirectory.Infrastructure.Data;

#nullable disable

namespace PersonDirectory.Infrastructure.Migrations
{
    [DbContext(typeof(PersonDirectoryDbContext))]
    [Migration("20251028120440_ChangeCityColumn")]
    partial class ChangeCityColumn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PersonDirectory.Application.Dtos.PersonDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("CityName")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("PersonalNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PersonDto");
                });

            modelBuilder.Entity("PersonDirectory.Application.Dtos.PhoneNumberDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<int?>("PersonDtoId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PersonDtoId");

                    b.ToTable("PhoneNumberDto");
                });

            modelBuilder.Entity("PersonDirectory.Application.Dtos.RelatedPersonDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("PersonDtoId")
                        .HasColumnType("integer");

                    b.Property<string>("RelatedPersonFirstName")
                        .HasColumnType("text");

                    b.Property<int>("RelatedPersonId")
                        .HasColumnType("integer");

                    b.Property<string>("RelatedPersonLastName")
                        .HasColumnType("text");

                    b.Property<string>("RelationType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PersonDtoId");

                    b.ToTable("RelatedPersonDto");
                });

            modelBuilder.Entity("PersonDirectory.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Cities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "თბილისი"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ბათუმი"
                        },
                        new
                        {
                            Id = 3,
                            Name = "ქუთაისი"
                        },
                        new
                        {
                            Id = 4,
                            Name = "რუსთავი"
                        },
                        new
                        {
                            Id = 5,
                            Name = "გორი"
                        },
                        new
                        {
                            Id = 6,
                            Name = "ზუგდიდი"
                        },
                        new
                        {
                            Id = 7,
                            Name = "ფოთი"
                        },
                        new
                        {
                            Id = 8,
                            Name = "თელავი"
                        });
                });

            modelBuilder.Entity("PersonDirectory.Domain.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PersonalNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("PersonalNumber")
                        .IsUnique();

                    b.ToTable("Persons", (string)null);
                });

            modelBuilder.Entity("PersonDirectory.Domain.Entities.PersonRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<int>("RelatedPersonId")
                        .HasColumnType("integer");

                    b.Property<int>("RelationType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RelatedPersonId");

                    b.HasIndex("PersonId", "RelatedPersonId")
                        .IsUnique();

                    b.ToTable("PersonRelations", (string)null);
                });

            modelBuilder.Entity("PersonDirectory.Domain.Entities.PhoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PhoneNumbers", (string)null);
                });

            modelBuilder.Entity("PersonDirectory.Application.Dtos.PhoneNumberDto", b =>
                {
                    b.HasOne("PersonDirectory.Application.Dtos.PersonDto", null)
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("PersonDtoId");
                });

            modelBuilder.Entity("PersonDirectory.Application.Dtos.RelatedPersonDto", b =>
                {
                    b.HasOne("PersonDirectory.Application.Dtos.PersonDto", null)
                        .WithMany("RelatedPersons")
                        .HasForeignKey("PersonDtoId");
                });

            modelBuilder.Entity("PersonDirectory.Domain.Entities.Person", b =>
                {
                    b.HasOne("PersonDirectory.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("PersonDirectory.Domain.Entities.PersonRelation", b =>
                {
                    b.HasOne("PersonDirectory.Domain.Entities.Person", "Person")
                        .WithMany("Relations")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonDirectory.Domain.Entities.Person", "RelatedPerson")
                        .WithMany()
                        .HasForeignKey("RelatedPersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("RelatedPerson");
                });

            modelBuilder.Entity("PersonDirectory.Domain.Entities.PhoneNumber", b =>
                {
                    b.HasOne("PersonDirectory.Domain.Entities.Person", "Person")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("PersonDirectory.Application.Dtos.PersonDto", b =>
                {
                    b.Navigation("PhoneNumbers");

                    b.Navigation("RelatedPersons");
                });

            modelBuilder.Entity("PersonDirectory.Domain.Entities.Person", b =>
                {
                    b.Navigation("PhoneNumbers");

                    b.Navigation("Relations");
                });
#pragma warning restore 612, 618
        }
    }
}
